#include<stdio.h>

#define sequenceListSize 100

// sequence list(SqList) data structure
typedef struct {
    int items[sequenceListSize];
    int length;
} SqList;

/** initialize the sequence list
 *
 * @param list
 * @return {@code 1} if the function works well
 */
int initList(SqList *list) {
    // we use a pointer here to assign the length
    list->length = 0;
    return 1;
}

/** get size of SqList
 *
 * @param *list
 * @return the length of the SqList
 */
int getLength(SqList *list) {
    // pointer or a variable is ok
    return list->length;
}

/** judge whether the SqList is empty or not
 *
 * @param list
 * @return {@code 0} if SqList is not empty
 *   while {@code 1} if SqList is empty
 */
int isListEmpty(SqList list) {
    if (list.length <= 0) {
        return 1;
    } else {
        return 0;
    }
}

/** insert data into SqList (before the position and the position starts from 1)
 *
 * @param list
 * @param position
 * @param item
 * @return {@code 0} if insert operation fail
 *   while {@code 1} if insert operation success
 */
int insert(SqList *list, int position, int item) {
    int i;
    if (list->length >= sequenceListSize) {
        printf("cannot insert more data as the SqList is not available\n");
        return 0;
    }
    if (position < 0 || position > list->length + 1) {
        printf("cannot insert data as the position is out of bound\n");
        return 0;
    }
    for (i = list->length - 1; i >= position - 1; i--) {
        list->items[i + 1] = list->items[i];
    }
    list->items[position - 1] = item;
    list->length++;
    return 1;
}

/** delete item with specific position
 *
 * @param list
 * @param position
 * @param item
 * @return {@code 0} if delete operation fail
 *   while {@code 1} if delete operation success
 */
int delete(SqList *list, int position, int *item) {
    int i;
    if (isListEmpty(*list)) {
        printf("cannot delete data as the SqList is empty\n");
        return 0;
    }
    if (position < 0 || position >= list->length) {
        printf("cannot delete data as the position is out of bound\n");
        return 0;
    }
    *item = list->items[position - 1];
    for (i = position - 1; i < list->length - 1; i++) {
        list->items[i] = list->items[i + 1];
    }
    list->length--;
    return 1;
}

/** output the SqList
 *
 * @param list
 */
void printSqList(SqList *list) {
    int i;
    for (i = 0; i < list->length; i++) {
        printf("%d ", list->items[i]);
    }
    printf("\n");
}

int main() {
    SqList listA;
    initList(&listA);
    printSqList(&listA);
    for (int i = 1; i <= 5; i++) {
        insert(&listA, i, i);
    }
    printSqList(&listA);
    int deleteItem; // to store the deleted item    delete(&listA, 4, &deleteItem);
    printSqList(&listA);
    printf("deleted item is %d", deleteItem);
}
























