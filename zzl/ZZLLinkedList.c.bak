#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} LNode, *PNode, *LinkList;

int InitList(LinkList *h) {
    *h = (LinkList) malloc(sizeof(LNode));
    (*h)->next = NULL;
    return 1;
}

void ListLength(LinkList h, int *total) {
    *total = 0;
    PNode p = h->next;
    while (p) {
        (*total)++;
        p = p->next;
    }
}

int LinkListInsert(LinkList h, int pos, int element) {
    PNode p = h, q;
    int i = 0;
    while (p && i < pos - 1) {
        p = p->next;
        i++;
    }
    if (!p || i > pos - 1) {
        printf("插入位置错误\n");
        return 0;
    }
    q = (PNode) malloc(sizeof(LNode));
    if (!q) {
        printf("无法创建节点\n");
        return 0;
    }
    q->data = element;
    q->next = p->next;
    p->next = q;
    return 1;
}

int LinkListDelete(LinkList h, int pos, int *item) {
    PNode p = h, q;
    int i = 0;
    while (p->next && i < pos - 1) {
        p = p->next;
        i++;
    }
    if (!p->next || i > pos - 1) {
        printf("删除位置错误\n");
        return 0;
    }
    q = p->next;
    p->next = q->next;
    *item = q->data;
    free(q);
    return 1;
}

int GetElem(LinkList h, int pos, int *item) {
    int i = 0;
    PNode p = h->next;
    while (p && i < pos - 1) {
        i++;
        p = p->next;
    }
    if (!p || i > pos - 1) {
        printf("查找位置错误\n");
        return 0;
    } else {
        *item = p->data;
        return 1;
    }
}

void TraverseList(LinkList h) {
    PNode p = h->next;
    while (p) {
        printf("%d\t,", p->data);
        p = p->next;
    }
    printf("\n");
}

void main() {
    LinkList L;
    InitList(&L);
    int pos, item, total;
    int select = 1;
    while (1) {
        printf("***********\n");
        printf("链表的功能如下\n");
        printf("[1]插入  [2]删除  [3]查找  [4]输出  [5]长度  [6]初始化\n");
        printf("***********\n");
        printf("请选择需要的功能:");
        scanf("%d", &select); // NOLINT
        switch (select) {
            case 1:
                printf("请输入要插入的位置");
                scanf("%d", &pos); //NOLINT
                printf("请输入要插入的数字");
                scanf("%d", &item); //NOLINT
                LinkListInsert(L, pos, item);
                break;
            case 2:
                printf("请输入要删除的位置：");
                scanf("%d", &pos); // NOLINT
                LinkListDelete(L, pos, &item);
                break;
            case 3:
                printf("请输入要查找的位置：");
                scanf("%d", &pos); // NOLINT
                GetElem(L, pos, &item);
                printf("在此位置上的元素为：%d\n", item);
                break;
            case 4:
                TraverseList(L);
                break;
            case 5:
                ListLength(L, &total);
                printf("链表的长度为：%d\n", total);
                break;
            case 6:
                InitList(&L);
                break;
            default:
                return;
        }
    }
}