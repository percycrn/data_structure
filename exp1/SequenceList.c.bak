#include<stdio.h>

#define sequenceListSize 100

typedef struct {
    int items[sequenceListSize];
    int length;
} SqList;

/**
 * initialize the sequence list
 * @param list
 * @return {@code 1} if the function works well
 */
int initList(SqList *list) {
    list->length = 0;
    return 1;
}

/**
 * judge whether the SqList is empty or not
 * @param list
 * @return {@code 0} if SqList is not empty
 *   while {@code 1} if SqList is empty
 */
int isListEmpty(SqList list) {
    if (list.length <= 0) {
        return 1;
    } else {
        return 0;
    }
}

/**
 * insert data into SqList (before the position and the position starts from 1)
 * @param list
 * @param position
 * @param item
 * @return {@code 0} if insert operation fail
 *   while {@code 1} if insert operation success
 */
int insert(SqList *list, int position, int item) {
    int i;
    if (list->length >= sequenceListSize) {
        printf("cannot insert more data as the SqList is not available\n");
        return 0;
    }
    if (position < 0 || position > list->length + 1) {
        printf("cannot insert data as the position is out of bound\n");
        return 0;
    }
    for (i = list->length - 1; i >= position - 1; i--) {
        list->items[i + 1] = list->items[i];
    }
    list->items[position - 1] = item;
    list->length++;
    return 1;
}

/**
 * delete item from specific position
 * @param list
 * @param position
 * @param item
 * @return {@code 0} if delete operation fail
 *   while {@code 1} if delete operation success
 */
int delete(SqList *list, int position, int *item) {
    int i;
    if (isListEmpty(*list)) {
        printf("cannot delete data as the SqList is empty\n");
        return 0;
    }
    if (position < 0 || position >= list->length) {
        printf("cannot delete data as the position is out of bound\n");
        return 0;
    }
    *item = list->items[position - 1];
    for (i = position - 1; i < list->length - 1; i++) {
        list->items[i] = list->items[i + 1];
    }
    list->length--;
    return 1;
}

/**
 * output the SqList
 * @param list
 */
void printSqList(SqList list) {
    int i;
    for (i = 0; i < list.length; i++) {
        printf("%d ", list.items[i]);
    }
    printf("\n");
}

SqList listA;

void menu() {
    printf("欢迎光临 顺序表操作界面!\n");
    printf("您可以进行以下选择\n");
    while (1) {
        printf("\n");
        printf("1.插入元素 2.删除元素 3.打印顺序表 4.退出系统\n");
        printf("请选择：");
        int option; // 选项
        int newItem; // 新结点值
        int position; // 新结点带插入位置
        // 当输入是字符或字符串时，会出现无限循环的现象，并未查明具体原因
        scanf("%d", &option); // NOLINT
        getchar();
        switch (option) {
            case 1:
                while (1) {
                    printf("请输入待插入位置及结点值: ");
                    scanf("%d %d", &position, &newItem); // NOLINT
                    if (position > listA.length + 1 || position < 1) {
                        printf("位置输入错误，请重新输入\n");
                        continue;
                    } else {
                        break;
                    }
                }
                insert(&listA, position, newItem);
                break;
            case 2:
                if (listA.length == 0) {
                    printf("顺序表为空无法删除");
                    break;
                }
                while (1) {
                    printf("请输入待删除结点位置");
                    scanf("%d", &position); // NOLINT
                    if (position > listA.length || position < 1) {
                        printf("位置输入错误，请重新输入\n");
                        continue;
                    } else {
                        break;
                    }
                }
                int deleteItem;
                delete(&listA, position, &deleteItem);
                printf("删去的结点值为%d\n", deleteItem);
                break;
            case 3:
                printSqList(listA);
                break;
            case 4:
                return;
            default:
                printf("请正确输入选项\n");
                break;
        }
    }
}

int main() {
    initList(&listA);
    menu();
}
