#include "stdio.h"
#include "stdlib.h"

typedef struct QNode {
    int data;
    struct QNode *next;
} LQNode, *PQNode;

typedef struct {
    PQNode front, rear;
    int length;
} LinkQueue;

/** initialize the queue
 *
 * @param linkQueue
 * @return {@code 1} if the function works well
 */
int initQueue(LinkQueue *linkQueue) {
    linkQueue->length = 0;
    linkQueue->front = (PQNode) malloc(sizeof(LQNode));
    linkQueue->rear = linkQueue->front;
    if (!linkQueue->front) {
        printf("fail to initialize the queue\n");
    }
    linkQueue->front->next = NULL;
    return 1;
}

/** judge whether the Stack is empty or not
 *
 * @param linkQueue
 * @return {@code 0} if linkQueue is not empty
 *   while {@code 1} if linkQueue is empty
 */
int isQueueEmpty(LinkQueue linkQueue) {
    if (linkQueue.front == linkQueue.rear) {
        return 0;
    }
    return 1;
}

/** enqueue
 *
 * @param linkQueue
 * @param newItem
 * @return {@code 0} if enqueue operation fail
 *   while {@code 1} if enqueue operation success
 */
int enQueue(LinkQueue *linkQueue, int newItem) {
    PQNode newNode = (PQNode) malloc(sizeof(LQNode));
    if (!newNode) {
        printf("fail to distribute the memory to new node");
        return 0;
    }
    newNode->data = newItem;
    newNode->next = NULL;
    (linkQueue->rear)->next = newNode;
    linkQueue->rear = newNode;
    linkQueue->length++;
    return 1;
}

/** deQueue
 * front始终不变，删除的始终是front之后的结点
 * @param list
 * @param position
 * @param item
 * @return {@code 0} if delete operation fail
 *   while {@code 1} if delete operation success
 */
int deQueue(LinkQueue *linkQueue, int *deQueueItem) {
    if (linkQueue->rear == linkQueue->front) {
        printf("fail to deQueue because the queue is empty");
        return 0;
    }
    // 新建结点为front下一个结点
    PQNode deleteNode = (linkQueue->front)->next;
    *deQueueItem = deleteNode->data;
    // 使结点出队列
    (linkQueue->front)->next = deleteNode->next;
    // 如果删去的结点是rear，也就是最后一个，则改变rear指针
    if (linkQueue->rear == deleteNode) {
        linkQueue->rear = linkQueue->front;
    }
    free(deleteNode);
    linkQueue->length--;
    return 1;
}

/** destroy queue
 *
 * @param topItem
 * @return {@code 0} if getItem operation fail
 *   while {@code 1} if getItem operation success
 */
int destroyQueue(LinkQueue *linkQueue) {
    while (linkQueue->front) {
        linkQueue->rear = (linkQueue->front)->next;
        free(linkQueue->front);
        linkQueue->front = linkQueue->rear;
    }
    return 1;
}

int printQueue(LinkQueue linkQueue) {
    PQNode pointer = (linkQueue.front)->next;
    while (pointer) {
        printf("%d ", pointer->data);
        pointer = pointer->next;
    }
    printf("\n");
    return 1;
}

LinkQueue linkQueue;

void menu() {
    printf("欢迎光临 队列链表操作界面!\n");
    printf("您可以进行以下选择\n");
    while (1) {
        printf("\n");
        printf("1.插入元素 2.删除元素 3.打印队列链表 4.退出系统\n");
        printf("请选择：");
        int option; // 选项
        int newItem; // 新结点值
        // 当输入是字符或字符串时，会出现无限循环的现象，并未查明具体原因
        scanf("%d", &option); // NOLINT
        getchar();
        switch (option) {
            case 1:
                printf("请输入新加入的元素：");
                scanf("%d", &newItem); // NOLINT
                enQueue(&linkQueue, newItem);
                break;
            case 2:
                if (!isQueueEmpty(linkQueue)) {
                    printf("链表为空无法删除");
                    break;
                }
                int deleteItem;
                deQueue(&linkQueue, &deleteItem);
                printf("删去的结点值为%d\n", deleteItem);
                break;
            case 3:
                printQueue(linkQueue);
                break;
            case 4:
                destroyQueue(&linkQueue);
                return;
            default:
                printf("请正确输入选项\n");
                break;
        }
    }
}

int main() {
    initQueue(&linkQueue);
    menu();
}
























