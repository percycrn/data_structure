#include <stdlib.h>
#include "stdio.h"

typedef struct StackNode {
    int item;
    struct StackNode *next;
} StackNode, *LinkedStack;

/** initialize the stack
 *
 * @param stack
 * @return {@code 1} if the function works well
 */
int initList(LinkedStack *top) {
    *top = (LinkedStack) malloc(sizeof(StackNode));
    if (*top == NULL) {
        printf("fail to initialize the link stack");
        return 0;
    }
    (*top)->next = NULL;
    return 1;
}

/** judge whether the Stack is empty or not
 *
 * @param stack
 * @return {@code 0} if SqList is not empty
 *   while {@code 1} if SqList is empty
 */
int isStackEmpty(LinkedStack top) {
    if (top->next == NULL) {
        return 0;
    } else {
        return 1;
    }
}

/** push new item into the stack
 *
 * @param stack
 * @param newItem
 * @return {@code 0} if insert operation fail
 *   while {@code 1} if insert operation success
 */
int push(LinkedStack top, int newItem) {
    StackNode *stackNode;
    stackNode = (StackNode *) malloc(sizeof(StackNode));
    stackNode->item = newItem;
    stackNode->next = top->next;
    top->next = stackNode;
    return 1;
}

/** delete item with specific position
 *
 * @param top
 * @param poppedItem
 * @return {@code 0} if delete operation fail
 *   while {@code 1} if delete operation success
 */
int pop(LinkedStack top, int *poppedItem) {
    if (top->next == NULL) {
        printf("cannot pop because the stack is empty ");
        return 0;
    }
    StackNode *stackNode = top->next;
    *poppedItem = (stackNode)->item;
    top->next = stackNode->next;
    free(stackNode);
    return 1;
}

/** get top item of the linked stack
 *
 * @param top
 * @param topItem
 * @return {@code 0} if getItem operation fail
 *   while {@code 1} if getItem operation success
 */
int getTop(LinkedStack top, int *topItem) {
    if (top->next == NULL) {
        printf("the linked stack is empty");
        return 0;
    }
    *topItem = (top->next)->item;
    return 1;
}


LinkedStack linkedStack;

void menu() {
    printf("欢迎光临 栈链表操作界面!\n");
    printf("您可以进行以下选择\n");
    while (1) {
        printf("\n");
        printf("1.入栈 2.出栈 3.获得栈顶元素 4.退出系统\n");
        printf("请选择：");
        int option; // 选项
        int newItem; // 新结点值
        // 当输入是字符或字符串时，会出现无限循环的现象，并未查明具体原因
        scanf("%d", &option); // NOLINT
        getchar();
        switch (option) {
            case 1:
                printf("请输入入栈元素：");
                scanf("%d", &newItem); // NOLINT
                push(linkedStack, newItem);
                break;
            case 2:
                if (!isStackEmpty(linkedStack)) {
                    printf("栈链表为空无法删除");
                    break;
                }
                int deleteItem;
                pop(linkedStack, &deleteItem);
                printf("出栈元素为%d\n", deleteItem);
                break;
            case 3:
                if (!isStackEmpty(linkedStack)) {
                    printf("栈链表为空");
                    break;
                }
                int topItem;
                getTop(linkedStack, &topItem);
                printf("栈顶元素为%d\n", topItem);
                break;
            case 4:
                return;
            default:
                printf("请正确输入选项\n");
                break;
        }
    }
}

int main() {
    initList(&linkedStack);
    menu();
}
