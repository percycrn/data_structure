//
// Created by percycrn on 2018/4/15.
//
#include "stdio.h"

#define QUEUESIZE 6

// queue data structure
typedef struct {
    int items[QUEUESIZE];
    int front, rear;
    int count;
} SqQueue;

/** initialize the queue
 *
 * @param sqQueue
 * @return {@code 1} if the function works well
 */
int initQueue(SqQueue *sqQueue) {
    sqQueue->front = 0;
    sqQueue->rear = 0;
    sqQueue->count = 0;
    return 1;
}

/** get the length of the queue
 *
 * @param sqQueue
 * @return the length of the queue
 */
int queueLength(SqQueue sqQueue) {
    return (sqQueue.rear - sqQueue.front + QUEUESIZE) % QUEUESIZE;
}

/** judge whether the sqQueue is empty or not
 *
 * @param sqQueue
 * @return {@code 0} if SqQueue is not empty
 *   while {@code 1} if SqQueue is empty
 */
int isQueueEmpty(SqQueue sqQueue) {
    if (sqQueue.count == 0) {
        return 1;
    }
    return 0;
}

/** enqueue
 *
 * @param sqQueue
 * @param newItem
 * @return {@code 0} if enqueue operation fail
 *   while {@code 1} if enqueue operation success
 */
int enQueue(SqQueue *sqQueue, int newItem) {
    if (sqQueue->rear == sqQueue->front && sqQueue->count == QUEUESIZE) {
        printf("the queue is full");
        return 0;
    }
    sqQueue->items[sqQueue->rear] = newItem;
    sqQueue->rear = (sqQueue->rear + 1) % QUEUESIZE;
    sqQueue->count++;
    return 1;
}

/** deQueue
 *
 * @param sqQueue
 * @param deQueueItem
 * @return {@code 0} if delete operation fail
 *   while {@code 1} if delete operation success
 */
int deQueue(SqQueue *sqQueue, int *deQueueItem) {
    if (sqQueue->count == 0) {
        printf("fail to deQueue because the queue is empty");
        return 0;
    }
    sqQueue->front = (sqQueue->front + 1) % QUEUESIZE;
    sqQueue->count--;
    return 1;
}

int printQueue(SqQueue sqQueue) {
    int pointer = sqQueue.front;
    while (pointer != sqQueue.rear) {
        printf("%d ", sqQueue.items[pointer]);
        pointer = (pointer + 1) % QUEUESIZE;
    }
    printf("\n");
    return 1;
}

int main() {
    SqQueue sqQueue;
    initQueue(&sqQueue);
    printf("依次入队\n");
    for (int i = 0; i < 7; i++) {
        enQueue(&sqQueue, i * i);
        printQueue(sqQueue);
    }
    printf("依次出队\n");
    int deleteItem;
    for (int i = 0; i < 7; i++) {
        deQueue(&sqQueue, &deleteItem);
        printQueue(sqQueue);
    }
}
























